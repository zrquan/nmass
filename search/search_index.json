{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nmass","text":"<p>Nmass is a python3 library that makes it easier for developers to use nmap and masscan. It translates many and complex arguments into idiomatic methods and wraps the scan results in well-defined pydantic models.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.10+</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install nmass\n</code></pre>"},{"location":"#examples","title":"Examples","text":""},{"location":"#basic-nmap-example","title":"Basic nmap example","text":"nmap_example.py<pre><code>nm = (\n    Nmap()\n    .with_targets(\"172.18.0.2\")\n    .with_most_common_ports(100)\n    .with_service_info()\n    .with_default_script()\n    .without_ping()\n    .without_dns_resolution()\n)\nif result := nm.run(timeout=100):\n    print(result.model_dump_json(exclude_none=True))\n</code></pre>"},{"location":"#basic-masscan-example","title":"Basic masscan example","text":"masscan_example.py<pre><code>ms = (\n    Masscan()\n    .with_targets(\"183.2.172.185\")\n    .with_ports(\"80,443\")\n    .with_banner()\n)\nif result := ms.run(timeout=100):\n    print(result.model_dump_json(exclude_none=True))\n</code></pre>"},{"location":"#async-support","title":"Async support","text":"<pre><code>try:\n    result = await Nmap().with_targets(\"example.com\").with_ports(80, 443).arun(timeout=100)\nexcept asyncio.TimeoutError:\n    ...\nelse:\n    if result is not None:\n        print(result.model_dump_json(exclude_none=True))\n</code></pre>"},{"location":"#more","title":"More?","text":"<p>Masscan is fast, and nmap is powerful. Why not combine the two?\ud83e\udd29 Start by using masscan to quickly detect open ports in bulk, then use nmap to perform in-depth scans on these open ports!</p> <pre><code>step1 = (\n    Masscan()\n    .with_targets(\"10.0.0.0/8\") # (1)\n    .with_ports(80, 443)\n    .with_rate(10000)\n)\nstep2 = (\n    Nmap()\n    .with_step(step1.run())\n    .with_service_info()\n    .with_scripts(\"http-title\")\n    .with_verbose()\n)\nretult = step2.run()\n</code></pre> <ol> <li>This is just an example, is not recommended to run.</li> </ol>"},{"location":"masscan/","title":"Masscan","text":""},{"location":"masscan/#nmass.masscan.Masscan","title":"<code>Masscan</code>","text":"<p>               Bases: <code>Scanner</code></p>"},{"location":"masscan/#nmass.masscan.Masscan.arun","title":"<code>arun(timeout=None, **kwargs)</code>  <code>async</code>","text":"<p>Run masscan command asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float | None</code> <p>Timeout for masscan process, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>NmapRun | None</code> <p>NmapRun object or None</p>"},{"location":"masscan/#nmass.masscan.Masscan.echo_config","title":"<code>echo_config()</code>","text":"<p>Echo the current configuration to a file (--echo).</p>"},{"location":"masscan/#nmass.masscan.Masscan.run","title":"<code>run(timeout=None, **kwargs)</code>","text":"<p>Run masscan command.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float | None</code> <p>Timeout for masscan process, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>NmapRun | None</code> <p>NmapRun object or None</p>"},{"location":"masscan/#nmass.masscan.Masscan.with_adapter","title":"<code>with_adapter(interface)</code>","text":"<p>Specify the network adapter to use (-e, --adapter).</p> <p>Parameters:</p> Name Type Description Default <code>interface</code> <code>str</code> <p>Network interface to use, e.g., \"eth0\"</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_adapter_ip","title":"<code>with_adapter_ip(ip)</code>","text":"<p>Specify the IP address of the network adapter (--adapter-ip).</p> <p>Parameters:</p> Name Type Description Default <code>ip</code> <code>str</code> <p>IP address of the adapter</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_adapter_mac","title":"<code>with_adapter_mac(address)</code>","text":"<p>Specify the MAC address of the network adapter (--adapter-mac).</p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code>str</code> <p>MAC address of the adapter</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_adapter_port","title":"<code>with_adapter_port(port)</code>","text":"<p>Specify the source port number of the network adapter (--adapter-port).</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>int</code> <p>Source port number of the adapter</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_append_output","title":"<code>with_append_output()</code>","text":"<p>Append output to file instead of overwriting (--append-output).</p>"},{"location":"masscan/#nmass.masscan.Masscan.with_banners","title":"<code>with_banners()</code>","text":"<p>Retrieve the banner information from scanned services (--banners).</p>"},{"location":"masscan/#nmass.masscan.Masscan.with_config","title":"<code>with_config(filename)</code>","text":"<p>Specify a configuration file (-c, --conf).</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path to the configuration file</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_http_user_agent","title":"<code>with_http_user_agent(user_agent)</code>","text":"<p>Specify a custom HTTP User-Agent string (--http-user-agent).</p> <p>Parameters:</p> Name Type Description Default <code>user_agent</code> <code>str</code> <p>HTTP User-Agent string</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_nmap_payloads","title":"<code>with_nmap_payloads(filename)</code>","text":"<p>Read custom packet payloads from a nmap payloads file (--nmap-payloads).</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path to the nmap payloads file</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_offline","title":"<code>with_offline()</code>","text":"<p>Do not actually transmit packets, useful for benchmarking (--offline).</p>"},{"location":"masscan/#nmass.masscan.Masscan.with_packet_trace","title":"<code>with_packet_trace()</code>","text":"<p>Print a summary of packets sent and received (--packet-trace).</p>"},{"location":"masscan/#nmass.masscan.Masscan.with_pcap","title":"<code>with_pcap(filename)</code>","text":"<p>Save received packets to a pcap file (--pcap).</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path to the pcap file</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_pcap_payloads","title":"<code>with_pcap_payloads(filename)</code>","text":"<p>Read custom packet payloads from a pcap file (--pcap-payloads).</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path to the pcap payloads file</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_pfring","title":"<code>with_pfring()</code>","text":"<p>Force the use of the PF_RING driver (--pfring).</p>"},{"location":"masscan/#nmass.masscan.Masscan.with_ping","title":"<code>with_ping()</code>","text":"<p>Include ICMP echo requests in the scan (--ping).</p>"},{"location":"masscan/#nmass.masscan.Masscan.with_rate","title":"<code>with_rate(rate)</code>","text":"<p>Set the packet transmission rate (--rate).</p> <p>Parameters:</p> Name Type Description Default <code>rate</code> <code>int</code> <p>Number of packets per second to send</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_regress","title":"<code>with_regress()</code>","text":"<p>Run a regression test and return '0' on success, '1' on failure (--regress).</p>"},{"location":"masscan/#nmass.masscan.Masscan.with_resume","title":"<code>with_resume(filename)</code>","text":"<p>Resume scanning from a previous configuration file (--resume).</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path to the resume configuration file</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_resume_count","title":"<code>with_resume_count(count)</code>","text":"<p>Set the maximum number of probes to send before exiting (--resume-count).</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>Maximum number of probes</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_resume_index","title":"<code>with_resume_index(index)</code>","text":"<p>Set the point in the scan to resume from (--resume-index).</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>Resume index</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_retries","title":"<code>with_retries(retries)</code>","text":"<p>Set the number of retries for packet sending (--retries).</p> <p>Parameters:</p> Name Type Description Default <code>retries</code> <code>int</code> <p>Number of retries</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_rotate","title":"<code>with_rotate(time)</code>","text":"<p>Rotate the output file at specified intervals (--rotate).</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>str</code> <p>Time interval for rotation, e.g., \"hourly\", \"10min\"</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_rotate_dir","title":"<code>with_rotate_dir(directory)</code>","text":"<p>Specify the directory to move rotated files to (--rotate-dir).</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>Directory to move rotated files to</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_rotate_offset","title":"<code>with_rotate_offset(offset)</code>","text":"<p>Set an offset for the rotation interval (--rotate-offset).</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>str</code> <p>Offset for rotation interval</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_router_mac","title":"<code>with_router_mac(address)</code>","text":"<p>Specify the MAC address of the router (--router-mac).</p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code>str</code> <p>MAC address of the router</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_sL","title":"<code>with_sL()</code>","text":"<p>Create a list of random addresses without scanning (-sL).</p>"},{"location":"masscan/#nmass.masscan.Masscan.with_seed","title":"<code>with_seed(seed)</code>","text":"<p>Set the seed for the random number generator (--seed).</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>str</code> <p>Seed value, or \"time\" for local timestamp</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_shards","title":"<code>with_shards(shard_id, total_shards)</code>","text":"<p>Split the scan among multiple instances (--shards).</p> <p>Parameters:</p> Name Type Description Default <code>shard_id</code> <code>int</code> <p>ID of this shard</p> required <code>total_shards</code> <code>int</code> <p>Total number of shards</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_targets","title":"<code>with_targets(*targets)</code>","text":"<p>Specify the targets to be scanned.</p> <p>Parameters:</p> Name Type Description Default <code>targets</code> <code>str</code> <p>There are three valid formats. The first is a single IPv4 address like \"192.168.0.1\". The second is a range like \"10.0.0.1-10.0.0.100\". The third is a CIDR address, like \"0.0.0.0/0\".</p> <code>()</code>"},{"location":"masscan/#nmass.masscan.Masscan.with_ttl","title":"<code>with_ttl(ttl)</code>","text":"<p>Set the TTL (Time-To-Live) of outgoing packets (--ttl).</p> <p>Parameters:</p> Name Type Description Default <code>ttl</code> <code>int</code> <p>TTL value</p> required"},{"location":"masscan/#nmass.masscan.Masscan.with_wait","title":"<code>with_wait(seconds)</code>","text":"<p>Set the number of seconds to wait after transmission is done (--wait).</p> <p>Parameters:</p> Name Type Description Default <code>seconds</code> <code>int</code> <p>Number of seconds to wait, or \"forever\"</p> required"},{"location":"masscan/#nmass.masscan.Masscan.without_closed_ports","title":"<code>without_closed_ports()</code>","text":"<p>Report only open ports, not closed ports (--open-only).</p>"},{"location":"model/","title":"NmapRun","text":"<p>With the NmapRun model, you can parse Nmap\u2019s XML output into Python objects (thanks to pydantic-xml), making it super convenient to handle scan results in Python code. You can access attributes, validate types, convert to JSON, CSV, or HTML (using XSLT), and more!</p> <p>The structure and data types of the NmapRun model align as closely as possible with Nmap's document type definition (DTD).</p> <p>Returns an NmapRun object after the scan is complete:</p> <pre><code>In [1]: from nmass import Nmap\n\nIn [2]: result = Nmap().with_targets(\"172.20.0.2\").with_ports(9200,9300).run()\n\nIn [3]: result\nOut[3]: NmapRun(scanner='nmap', args='/usr/bin/nmap -oX - -vvv --noninteractive -p 9200,9300 172.20.0.2', start=1730376449, start_time='Thu Oct 31 20:07:29 2024', version='7.95', xmloutputversion='1.05', scaninfo=ScanInfo(type=&lt;ScanType.connect: 'connect'&gt;, protocol=&lt;PortProtocol.tcp: 'tcp'&gt;, numservices=2, services='9200,9300'), verbose={'level': 3}, debugging={'level': 0}, hosthint=HostHint(status=Status(state=&lt;HostState.up: 'up'&gt;, reason='unknown-response', reason_ttl='0'), address=[Address(addr='172.20.0.2', addrtype='ipv4')], hostnames=[]), taskprogress=None, hosts=[Host(status=Status(state=&lt;HostState.up: 'up'&gt;, reason='conn-refused', reason_ttl='0'), address=[Address(addr='172.20.0.2', addrtype='ipv4')], hostnames=[], ports=Ports(extraports=None, ports=[Port(protocol=&lt;PortProtocol.tcp: 'tcp'&gt;, portid=9200, state=State(state=&lt;PortState.open: 'open'&gt;, reason='syn-ack', reason_ttl='0'), service=Service(name='wap-wsp', banner=None, product=None, version=None, method='table', confidence=3, cpe=None), scripts=None), Port(protocol=&lt;PortProtocol.tcp: 'tcp'&gt;, portid=9300, state=State(state=&lt;PortState.open: 'open'&gt;, reason='syn-ack', reason_ttl='0'), service=Service(name='vrace', banner=None, product=None, version=None, method='table', confidence=3, cpe=None), scripts=None)]), os=None, uptime=None, distance=None, tcpsequence=None, ipidsequence=None, tcptssequence=None, trace=None, times={'srtt': 89, 'rttvar': 2829, 'to': 100000})], stats=Stats(finished={'time': '1730376449', 'timestr': 'Thu Oct 31 20:07:29 2024', 'summary': 'Nmap done at Thu Oct 31 20:07:29 2024; 1 IP address (1 host up) scanned in 0.04 seconds', 'elapsed': '0.04', 'exit': 'success'}, hosts={'up': 1, 'down': 0, 'total': 1}))\n</code></pre> <p>With the awesome pydantic package, you can easily convert the result to JSON.</p> <pre><code>In [4]: result.model_dump_json()\nOut[4]: '{\"scanner\":\"nmap\",\"args\":\"/usr/bin/nmap -oX - -vvv --noninteractive -p 9200,9300 172.20.0.2\",\"start\":1730376449,\"start_time\":\"Thu Oct 31 20:07:29 2024\",\"version\":\"7.95\",\"xmloutputversion\":\"1.05\",\"scaninfo\":{\"type\":\"connect\",\"protocol\":\"tcp\",\"numservices\":2,\"services\":\"9200,9300\"},\"verbose\":{\"level\":3},\"debugging\":{\"level\":0},\"hosthint\":{\"status\":{\"state\":\"up\",\"reason\":\"unknown-response\",\"reason_ttl\":\"0\"},\"address\":[{\"addr\":\"172.20.0.2\",\"addrtype\":\"ipv4\"}],\"hostnames\":[]},\"taskprogress\":null,\"hosts\":[{\"status\":{\"state\":\"up\",\"reason\":\"conn-refused\",\"reason_ttl\":\"0\"},\"address\":[{\"addr\":\"172.20.0.2\",\"addrtype\":\"ipv4\"}],\"hostnames\":[],\"ports\":{\"extraports\":null,\"ports\":[{\"protocol\":\"tcp\",\"portid\":9200,\"state\":{\"state\":\"open\",\"reason\":\"syn-ack\",\"reason_ttl\":\"0\"},\"service\":{\"name\":\"wap-wsp\",\"banner\":null,\"product\":null,\"version\":null,\"method\":\"table\",\"confidence\":3,\"cpe\":null},\"scripts\":null},{\"protocol\":\"tcp\",\"portid\":9300,\"state\":{\"state\":\"open\",\"reason\":\"syn-ack\",\"reason_ttl\":\"0\"},\"service\":{\"name\":\"vrace\",\"banner\":null,\"product\":null,\"version\":null,\"method\":\"table\",\"confidence\":3,\"cpe\":null},\"scripts\":null}]},\"os\":null,\"uptime\":null,\"distance\":null,\"tcpsequence\":null,\"ipidsequence\":null,\"tcptssequence\":null,\"trace\":null,\"times\":{\"srtt\":89,\"rttvar\":2829,\"to\":100000}}],\"stats\":{\"finished\":{\"time\":\"1730376449\",\"timestr\":\"Thu Oct 31 20:07:29 2024\",\"summary\":\"Nmap done at Thu Oct 31 20:07:29 2024; 1 IP address (1 host up) scanned in 0.04 seconds\",\"elapsed\":\"0.04\",\"exit\":\"success\"},\"hosts\":{\"up\":1,\"down\":0,\"total\":1}}}'\n</code></pre> <p>Want to convert the result into a nice HTML file? Easy!</p> <pre><code>with open(\"/tmp/nmap.html\", \"w\") as f:\n    html_code = result.to_html(xslt_path=\"https://raw.githubusercontent.com/Haxxnet/nmap-bootstrap-xsl/main/nmap-bootstrap.xsl\")\n    f.write(html_code)\n</code></pre> <p></p>"},{"location":"nmap/","title":"Nmap","text":""},{"location":"nmap/#nmass.nmap.Nmap","title":"<code>Nmap</code>","text":"<p>               Bases: <code>Scanner</code></p>"},{"location":"nmap/#nmass.nmap.Nmap.arun","title":"<code>arun(timeout=None, **kwargs)</code>  <code>async</code>","text":"<p>Run nmap command asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float | None</code> <p>Timeout for nmap process, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>NmapRun | None</code> <p>NmapRun object or None</p>"},{"location":"nmap/#nmass.nmap.Nmap.run","title":"<code>run(timeout=None, **kwargs)</code>","text":"<p>Run nmap command.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float | None</code> <p>Timeout for nmap process, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>NmapRun | None</code> <p>NmapRun object or None</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_ack_discovery","title":"<code>with_ack_discovery(*ports)</code>","text":"<p>TCP ACK Discovery (-PA): Send ACK packets to specified ports.</p> <p>Parameters:</p> Name Type Description Default <code>ports</code> <code>str</code> <p>Ports to perform ACK discovery on</p> <code>()</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_ack_scan","title":"<code>with_ack_scan()</code>","text":"<p>TCP ACK Scan (-sA).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_aggressive_scan","title":"<code>with_aggressive_scan()</code>","text":"<p>Enable aggressive scan options (-A).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_ascii_data","title":"<code>with_ascii_data(data)</code>","text":"<p>Send specified ASCII data (--data-string).</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>ASCII data string</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_bad_sum","title":"<code>with_bad_sum()</code>","text":"<p>Send packets with a bogus TCP/UDP/SCTP checksum (--badsum).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_connect_scan","title":"<code>with_connect_scan()</code>","text":"<p>TCP Connect Scan (-sT).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_consecutive_port_scanning","title":"<code>with_consecutive_port_scanning()</code>","text":"<p>Scan ports sequentially (-r), do not randomize the order.</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_custom_dns_servers","title":"<code>with_custom_dns_servers(*servers)</code>","text":"<p>Specify custom DNS servers (--dns-servers).</p> <p>Parameters:</p> Name Type Description Default <code>servers</code> <code>str</code> <p>List of DNS servers to use</p> <code>()</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_data_dir","title":"<code>with_data_dir(dirname)</code>","text":"<p>Specify custom data directory (--datadir).</p> <p>Parameters:</p> Name Type Description Default <code>dirname</code> <code>str</code> <p>Path to data directory</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_data_length","title":"<code>with_data_length(length)</code>","text":"<p>Append random data to sent packets (--data-length).</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>Length of random data</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_debugging","title":"<code>with_debugging(level=1)</code>","text":"<p>Increase debugging level (-d, -dd, ...).</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Debugging level</p> <code>1</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_decoys","title":"<code>with_decoys(*decoys)</code>","text":"<p>Use decoys to obfuscate scan origin (-D).</p> <p>Parameters:</p> Name Type Description Default <code>decoys</code> <code>str</code> <p>List of decoy IP addresses</p> <code>()</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_default_script","title":"<code>with_default_script()</code>","text":"<p>Run default script scan (-sC).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_fast_mode","title":"<code>with_fast_mode()</code>","text":"<p>Enable fast mode (-F), scans fewer ports than the default scan.</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_forced_dns_resolution","title":"<code>with_forced_dns_resolution()</code>","text":"<p>Force DNS resolution of all targets (-R).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_fragment_packets","title":"<code>with_fragment_packets()</code>","text":"<p>Fragment packets to evade firewall/IDS (-f).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_ftp_bounce_scan","title":"<code>with_ftp_bounce_scan(ftp_relay_host)</code>","text":"<p>FTP Bounce Scan (-b) using a relay host.</p> <p>Parameters:</p> Name Type Description Default <code>ftp_relay_host</code> <code>str</code> <p>IP address of the FTP relay host</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_hex_data","title":"<code>with_hex_data(data)</code>","text":"<p>Send specified hex data (--data).</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>Hex data string</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_host_timeout","title":"<code>with_host_timeout(timeout)</code>","text":"<p>Give up on target after this long (--host-timeout).</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Host timeout in milliseconds</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_hostgroup_size","title":"<code>with_hostgroup_size(min=None, max=None)</code>","text":"<p>Parallel host scan group sizes (--min-hostgroup, --max-hostgroup).</p> <p>Parameters:</p> Name Type Description Default <code>min</code> <code>int | None</code> <p>Minimum host group size, defaults to None</p> <code>None</code> <code>max</code> <code>int | None</code> <p>Maximum host group size, defaults to None</p> <code>None</code> <p>Raises:</p> Type Description <code>NmapArgumentError</code> <p>If both min and max are None</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_icmp_echo_discovery","title":"<code>with_icmp_echo_discovery()</code>","text":"<p>ICMP Echo Request Discovery (-PE): Send ICMP Echo Request packets.</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_icmp_netmask_discovery","title":"<code>with_icmp_netmask_discovery()</code>","text":"<p>ICMP Netmask Request Discovery (-PM): Send ICMP Netmask Request packets.</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_icmp_timestamp_discovery","title":"<code>with_icmp_timestamp_discovery()</code>","text":"<p>ICMP Timestamp Request Discovery (-PP): Send ICMP Timestamp Request packets.</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_idle_scan","title":"<code>with_idle_scan(zombie_host, probe_port)</code>","text":"<p>Idle Scan using a zombie host (-sI).</p> <p>Parameters:</p> Name Type Description Default <code>zombie_host</code> <code>str</code> <p>IP address of the zombie host</p> required <code>probe_port</code> <code>int</code> <p>Probe port number</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_interface","title":"<code>with_interface(iface)</code>","text":"<p>Specify network interface to use (-e).</p> <p>Parameters:</p> Name Type Description Default <code>iface</code> <code>str</code> <p>Network interface name</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_ip_options","title":"<code>with_ip_options(options)</code>","text":"<p>Send specified IP options (--ip-options).</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>str</code> <p>IP options string</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_ip_protocol_ping_discovery","title":"<code>with_ip_protocol_ping_discovery(*protocols)</code>","text":"<p>IP Protocol Ping Discovery (-PO): Send packets for specified protocols.</p> <p>Parameters:</p> Name Type Description Default <code>protocols</code> <code>str</code> <p>Protocols to use for IP ping discovery</p> <code>()</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_ip_protocol_scan","title":"<code>with_ip_protocol_scan()</code>","text":"<p>IP Protocol Scan (-sO).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_ipv6","title":"<code>with_ipv6()</code>","text":"<p>Scan targets using IPv6 (-6).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_list_scan","title":"<code>with_list_scan()</code>","text":"<p>List Scan (-sL): Simply list targets to scan.</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_maimon_scan","title":"<code>with_maimon_scan()</code>","text":"<p>TCP Maimon Scan (-sM).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_max_retries","title":"<code>with_max_retries(tries)</code>","text":"<p>Caps number of port scan probe retransmissions (--max-retries).</p> <p>Parameters:</p> Name Type Description Default <code>tries</code> <code>int</code> <p>Maximum number of retries</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_mtu","title":"<code>with_mtu(offset)</code>","text":"<p>Specify MTU (Maximum Transmission Unit) offset (--mtu).</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>MTU offset, must be a multiple of eight</p> required <p>Raises:</p> Type Description <code>NmapArgumentError</code> <p>If offset is not a multiple of eight</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_os_detection","title":"<code>with_os_detection()</code>","text":"<p>Enable OS detection (-O).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_osscan_guess","title":"<code>with_osscan_guess()</code>","text":"<p>Guess OS when detection is not conclusive (--osscan-guess).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_osscan_limit","title":"<code>with_osscan_limit()</code>","text":"<p>Limit OS detection to promising targets (--osscan-limit).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_packet_trace","title":"<code>with_packet_trace()</code>","text":"<p>Show all packets sent and received (--packet-trace).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_parallelism","title":"<code>with_parallelism(min=None, max=None)</code>","text":"<p>Probe parallelization (--min-parallelism, --max-parallelism).</p> <p>Parameters:</p> Name Type Description Default <code>min</code> <code>int | None</code> <p>Minimum parallelism, defaults to None</p> <code>None</code> <code>max</code> <code>int | None</code> <p>Maximum parallelism, defaults to None</p> <code>None</code> <p>Raises:</p> Type Description <code>NmapArgumentError</code> <p>If both min and max are None</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_ping_scan","title":"<code>with_ping_scan()</code>","text":"<p>Ping Scan (-sn): Disable port scan, only discover hosts.</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_port_exclusion","title":"<code>with_port_exclusion(*ports)</code>","text":"<p>Exclude specified ports from scanning (--exclude-ports).</p> <p>Parameters:</p> Name Type Description Default <code>ports</code> <code>str</code> <p>List of ports to exclude</p> <code>()</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_port_ratio","title":"<code>with_port_ratio(ratio)</code>","text":"<p>Scan ports more common than a specified ratio (--port-ratio).</p> <p>Parameters:</p> Name Type Description Default <code>ratio</code> <code>float</code> <p>Ratio for common ports</p> required <p>Raises:</p> Type Description <code>NmapArgumentError</code> <p>If ratio is not between 0 and 1</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_privileged","title":"<code>with_privileged()</code>","text":"<p>Assume that the user has special privileges (--privileged).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_proxies","title":"<code>with_proxies(*proxies)</code>","text":"<p>Use specified proxies for scanning (--proxies).</p> <p>Parameters:</p> Name Type Description Default <code>proxies</code> <code>str</code> <p>List of proxy addresses</p> <code>()</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_random_targets","title":"<code>with_random_targets(number)</code>","text":"<p>Choose random targets for scanning.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>int</code> <p>Number of IPs to generate for scanning</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_rate","title":"<code>with_rate(min=None, max=None)</code>","text":"<p>Send packets no slower/faster than min/max per second (--min-rate, --max-rate).</p> <p>Parameters:</p> Name Type Description Default <code>min</code> <code>int | None</code> <p>Minimum rate, defaults to None</p> <code>None</code> <code>max</code> <code>int | None</code> <p>Maximum rate, defaults to None</p> <code>None</code> <p>Raises:</p> Type Description <code>NmapArgumentError</code> <p>If both min and max are None</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_reason","title":"<code>with_reason()</code>","text":"<p>Display the reason a port is in a particular state (--reason).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_rtt_timeout","title":"<code>with_rtt_timeout(min=None, max=None, initial=None)</code>","text":"<p>Specifies probe round trip time (--min-rtt-timeout, --max-rtt-timeout, --initial-rtt-timeout).</p> <p>Parameters:</p> Name Type Description Default <code>min</code> <code>int | None</code> <p>Minimum RTT timeout, defaults to None</p> <code>None</code> <code>max</code> <code>int | None</code> <p>Maximum RTT timeout, defaults to None</p> <code>None</code> <code>initial</code> <code>int | None</code> <p>Initial RTT timeout, defaults to None</p> <code>None</code> <p>Raises:</p> Type Description <code>NmapArgumentError</code> <p>If all parameters are None</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_scan_delay","title":"<code>with_scan_delay(time=None, max_time=None)</code>","text":"<p>Adjust delay between probes (--scan-delay, --max-scan-delay).</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>int | None</code> <p>Scan delay time, defaults to None</p> <code>None</code> <code>max_time</code> <code>int | None</code> <p>Maximum scan delay time, defaults to None</p> <code>None</code> <p>Raises:</p> Type Description <code>NmapArgumentError</code> <p>If both time and max_time are None</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_script_arguments","title":"<code>with_script_arguments(**arguments)</code>","text":"<p>Pass arguments to scripts (--script-args).</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>str</code> <p>Dictionary of script arguments</p> <code>{}</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_script_arguments_file","title":"<code>with_script_arguments_file(filename)</code>","text":"<p>Load script arguments from a file (--script-args-file).</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>File containing script arguments</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_script_help","title":"<code>with_script_help(*scripts)</code>","text":"<p>Show help for specified scripts (--script-help).</p> <p>Parameters:</p> Name Type Description Default <code>scripts</code> <code>str</code> <p>List of scripts to show help for</p> <code>()</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_script_trace","title":"<code>with_script_trace()</code>","text":"<p>Show all data sent and received during script scan (--script-trace).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_script_update_db","title":"<code>with_script_update_db()</code>","text":"<p>Update the script database (--script-updatedb).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_scripts","title":"<code>with_scripts(*scripts)</code>","text":"<p>Run specified scripts (--script).</p> <p>Parameters:</p> Name Type Description Default <code>scripts</code> <code>str</code> <p>List of scripts to run</p> <code>()</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_sctp_cookie_echo_scan","title":"<code>with_sctp_cookie_echo_scan()</code>","text":"<p>SCTP COOKIE-ECHO Scan (-sZ).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_sctp_discovery","title":"<code>with_sctp_discovery(*ports)</code>","text":"<p>SCTP INIT Discovery (-PY): Send SCTP INIT packets to specified ports.</p> <p>Parameters:</p> Name Type Description Default <code>ports</code> <code>str</code> <p>Ports to perform SCTP discovery on</p> <code>()</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_sctp_init_scan","title":"<code>with_sctp_init_scan()</code>","text":"<p>SCTP INIT Scan (-sY).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_send_ethernet","title":"<code>with_send_ethernet()</code>","text":"<p>Send packets at raw ethernet level (--send-eth).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_send_ip","title":"<code>with_send_ip()</code>","text":"<p>Send packets at raw IP level (--send-ip).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_service_info","title":"<code>with_service_info()</code>","text":"<p>Detect service versions (-sV).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_source_port","title":"<code>with_source_port(port)</code>","text":"<p>Specify source port number (--source-port).</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>int</code> <p>Source port number</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_spoof_address","title":"<code>with_spoof_address(ip)</code>","text":"<p>Spoof source IP address (-S).</p> <p>Parameters:</p> Name Type Description Default <code>ip</code> <code>str</code> <p>IP address to spoof</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_spoof_mac","title":"<code>with_spoof_mac(mac)</code>","text":"<p>Spoof MAC address (--spoof-mac).</p> <p>Parameters:</p> Name Type Description Default <code>mac</code> <code>str</code> <p>MAC address to spoof</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_syn_discovery","title":"<code>with_syn_discovery(*ports)</code>","text":"<p>TCP SYN Discovery (-PS): Send SYN packets to specified ports.</p> <p>Parameters:</p> Name Type Description Default <code>ports</code> <code>str</code> <p>Ports to perform SYN discovery on</p> <code>()</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_syn_scan","title":"<code>with_syn_scan()</code>","text":"<p>TCP SYN Scan (-sS).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_system_dns","title":"<code>with_system_dns()</code>","text":"<p>Use OS's DNS resolver (--system-dns).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_tcp_fin_scan","title":"<code>with_tcp_fin_scan()</code>","text":"<p>TCP FIN Scan (-sF).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_tcp_null_scan","title":"<code>with_tcp_null_scan()</code>","text":"<p>TCP Null Scan (-sN).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_tcp_scan_flags","title":"<code>with_tcp_scan_flags(*flags)</code>","text":"<p>Custom TCP Scan Flags (--scanflags).</p> <p>Parameters:</p> Name Type Description Default <code>flags</code> <code>TCPFlag</code> <p>List of TCP flags to set</p> <code>()</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_tcp_xmas_scan","title":"<code>with_tcp_xmas_scan()</code>","text":"<p>TCP Xmas Scan (-sX).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_time_to_live","title":"<code>with_time_to_live(ttl)</code>","text":"<p>Set IP time-to-live (TTL) field (-ttl).</p> <p>Parameters:</p> Name Type Description Default <code>ttl</code> <code>int</code> <p>TTL value</p> required <p>Raises:</p> Type Description <code>NmapArgumentError</code> <p>If TTL is not between 0 and 225</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_timing_template","title":"<code>with_timing_template(template)</code>","text":"<p>Set timing template (-T).</p> <p>Parameters:</p> Name Type Description Default <code>template</code> <code>TimingTemplate</code> <p>Timing template to use</p> required"},{"location":"nmap/#nmass.nmap.Nmap.with_traceroute","title":"<code>with_traceroute()</code>","text":"<p>Perform traceroute to discovered hosts (--traceroute).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_udp_discovery","title":"<code>with_udp_discovery(*ports)</code>","text":"<p>UDP Discovery (-PU): Send UDP packets to specified ports.</p> <p>Parameters:</p> Name Type Description Default <code>ports</code> <code>str</code> <p>Ports to perform UDP discovery on</p> <code>()</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_udp_scan","title":"<code>with_udp_scan()</code>","text":"<p>UDP Scan (-sU).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_verbose","title":"<code>with_verbose(level=1)</code>","text":"<p>Increase verbosity level (-v, -vv, ...).</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Verbosity level</p> <code>1</code>"},{"location":"nmap/#nmass.nmap.Nmap.with_version_all","title":"<code>with_version_all()</code>","text":"<p>Try every single probe (--version-all, intensity 9).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_version_intensity","title":"<code>with_version_intensity(intensity=7)</code>","text":"<p>Set version scan intensity (--version-intensity).</p> <p>Parameters:</p> Name Type Description Default <code>intensity</code> <code>int</code> <p>Intensity level (0 to 9)</p> <code>7</code> <p>Raises:</p> Type Description <code>NmapArgumentError</code> <p>If intensity is not between 0 and 9</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_version_light","title":"<code>with_version_light()</code>","text":"<p>Limit version scan to most likely probes (--version-light, intensity 2).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_version_trace","title":"<code>with_version_trace()</code>","text":"<p>Show detailed version scan activity (--version-trace, for debugging).</p>"},{"location":"nmap/#nmass.nmap.Nmap.with_window_scan","title":"<code>with_window_scan()</code>","text":"<p>TCP Window Scan (-sW).</p>"},{"location":"nmap/#nmass.nmap.Nmap.without_closed_ports","title":"<code>without_closed_ports()</code>","text":"<p>Only show open (or possibly open) ports (--open).</p>"},{"location":"nmap/#nmass.nmap.Nmap.without_dns_resolution","title":"<code>without_dns_resolution()</code>","text":"<p>Skip DNS resolution (-n).</p>"},{"location":"nmap/#nmass.nmap.Nmap.without_ping","title":"<code>without_ping()</code>","text":"<p>Treat all hosts as online -- skip host discovery (-Pn).</p>"},{"location":"nmap/#nmass.nmap.Nmap.without_privileged","title":"<code>without_privileged()</code>","text":"<p>Assume that the user does not have special privileges (--unprivileged).</p>"}]}